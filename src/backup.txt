void TIM_BasicConfig(void) {
    /* TIM1 CONFIGURATION */
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_TIM1EN); // Enable clocking
    GPIOA->CRH &= ~(GPIO_CRH_CNF8_Msk | GPIO_CRH_CNF11_Msk); // Reset cnf bits
    /* Set pins cnfs to AF PP 2MHz */
    GPIOA->CRH |= (GPIO_CRH_CNF8_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_MODE11_1);
    TIM1->CR1 &= ~TIM_CR1_CKD;
    TIM1->CR1 |= (TIM_CR1_CKD_0 | TIM_CR1_CKD_1); // Set clock divider

    TIM1->DIER |= TIM_DIER_UIE; // Enable UEV ISR
    TIM1->BDTR |= TIM_BDTR_MOE; // Enable main outputs
    TIM1->CR2 |= (TIM_CR2_MMS_2 | TIM_CR2_MMS_0); // Set master output to CC1F

    /* TIM2 CONFIGURATION */
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Enable clocking, GPIOA enabled
    GPIOA->CRL &= ~(GPIO_CRL_CNF1_Msk | GPIO_CRL_CNF2_Msk); // Reset cnf bits
    /* Set pins cnfs to AF PP 2MHz */
    GPIOA->CRL |= (GPIO_CRL_CNF1_1 | GPIO_CRL_CNF2_1 | GPIO_CRL_MODE1_1 | GPIO_CRL_MODE2_1);
    TIM2->CR1 &= ~TIM_CR1_CKD_Msk;
    TIM2->CR1 |= (TIM_CR1_CKD_0 | TIM_CR1_CKD_1); // Set clock divider

    TIM2->SMCR &= ~TIM_SMCR_TS_Msk; // Set ITR0 as trig source
    TIM2->SMCR &= ~TIM_SMCR_SMS_Msk;
    TIM2->SMCR |= (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0); // Set TIM2 in slave reset mode
    /* No need for UEV ISR here */
}

/**
 * 
 */
void TIM_Config_Static(void) {

    TIM_BasicConfig();

    GPIOA->CRH &= ~(GPIO_CRH_CNF9_Msk);
    GPIOA->CRH |= (GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1);

    TIM1->PSC = 399;
    TIM1->ARR = 1199; // Period of the actual PWM freq
    TIM1->RCR = 255; // Set repetition counter to 255

    /* Channel 1 */
    TIM1->CCMR1 |= (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2); // Set mode to PWM1
    TIM1->CCR1 = TIM1->ARR / 4;
    TIM1->CCER |= TIM_CCER_CC1E; // Enable Channel 1

    /* Channel 2 */
    TIM1->CCMR1 |= (TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2); // Set mode to PWM2
    TIM1->CCR1 = TIM1->ARR / 4;
    TIM1->CCER |= TIM_CCER_CC2E;

    /* Channel 4 */
    TIM1->CCMR2 |= (TIM_CCMR2_OC4M_0 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2); // PWM2
    TIM1->CCR4 = 3*TIM1->ARR / 4;
    TIM1->CCER |= TIM_CCER_CC4E; // Enable Channel 4

    TIM1->EGR |= TIM_EGR_UG; // Update timer

    NVIC_SetPriority(TIM1_UP_IRQn, 0);
    NVIC_EnableIRQ(TIM1_UP_IRQn);

    TIM2->ARR = 1199;
    TIM2->PSC = 399;

    /* Channel 2 */
    TIM2->CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2); // Set mode to PWM1
    TIM2->CCR2 = TIM2->ARR / 2;
    TIM2->CCER |= TIM_CCER_CC2E; // Enable Channel 2

    /* Channel 3 */
    TIM2->CCMR2 |= (TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2); // PWM2
    TIM2->CCR3 = TIM2->ARR / 2;
    TIM2->CCER |= TIM_CCER_CC3E; // Enable Channel 3
    TIM2->EGR |= TIM_EGR_UG;

    //TIM2->CR1 &= ~TIM_CR1_CEN; // Enable timer 2, first bc won't start wo tim1
    TIM1->CR1 |= TIM_CR1_CEN; // Enable timer 1
}